// Generated by gencpp from file shared_messages/TagsImage.msg
// DO NOT EDIT!


#ifndef SHARED_MESSAGES_MESSAGE_TAGSIMAGE_H
#define SHARED_MESSAGES_MESSAGE_TAGSIMAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/UInt16MultiArray.h>
#include <sensor_msgs/Image.h>

namespace shared_messages
{
template <class ContainerAllocator>
struct TagsImage_
{
  typedef TagsImage_<ContainerAllocator> Type;

  TagsImage_()
    : tags()
    , image()  {
    }
  TagsImage_(const ContainerAllocator& _alloc)
    : tags(_alloc)
    , image(_alloc)  {
    }



   typedef  ::std_msgs::UInt16MultiArray_<ContainerAllocator>  _tags_type;
  _tags_type tags;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
  _image_type image;




  typedef boost::shared_ptr< ::shared_messages::TagsImage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shared_messages::TagsImage_<ContainerAllocator> const> ConstPtr;

}; // struct TagsImage_

typedef ::shared_messages::TagsImage_<std::allocator<void> > TagsImage;

typedef boost::shared_ptr< ::shared_messages::TagsImage > TagsImagePtr;
typedef boost::shared_ptr< ::shared_messages::TagsImage const> TagsImageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shared_messages::TagsImage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shared_messages::TagsImage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shared_messages

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'shared_messages': ['/home/swarmie/rover_workspace/src/shared_messages/msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shared_messages::TagsImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shared_messages::TagsImage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_messages::TagsImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_messages::TagsImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_messages::TagsImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_messages::TagsImage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shared_messages::TagsImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b132e3eadc4e6e4beec609ce40f264d8";
  }

  static const char* value(const ::shared_messages::TagsImage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb132e3eadc4e6e4bULL;
  static const uint64_t static_value2 = 0xeec609ce40f264d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::shared_messages::TagsImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_messages/TagsImage";
  }

  static const char* value(const ::shared_messages::TagsImage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shared_messages::TagsImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
std_msgs/UInt16MultiArray tags\n\
sensor_msgs/Image image\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt16MultiArray\n\
# Please look at the MultiArrayLayout message definition for\n\
# documentation on all multiarrays.\n\
\n\
MultiArrayLayout  layout        # specification of data layout\n\
uint16[]            data        # array of data\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayLayout\n\
# The multiarray declares a generic multi-dimensional array of a\n\
# particular data type.  Dimensions are ordered from outer most\n\
# to inner most.\n\
\n\
MultiArrayDimension[] dim # Array of dimension properties\n\
uint32 data_offset        # padding bytes at front of data\n\
\n\
# Accessors should ALWAYS be written in terms of dimension stride\n\
# and specified outer-most dimension first.\n\
# \n\
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n\
#\n\
# A standard, 3-channel 640x480 image with interleaved color channels\n\
# would be specified as:\n\
#\n\
# dim[0].label  = \"height\"\n\
# dim[0].size   = 480\n\
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
# dim[1].label  = \"width\"\n\
# dim[1].size   = 640\n\
# dim[1].stride = 3*640 = 1920\n\
# dim[2].label  = \"channel\"\n\
# dim[2].size   = 3\n\
# dim[2].stride = 3\n\
#\n\
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\
================================================================================\n\
MSG: std_msgs/MultiArrayDimension\n\
string label   # label of given dimension\n\
uint32 size    # size of given dimension (in type units)\n\
uint32 stride  # stride of given dimension\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::shared_messages::TagsImage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shared_messages::TagsImage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tags);
      stream.next(m.image);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct TagsImage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shared_messages::TagsImage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shared_messages::TagsImage_<ContainerAllocator>& v)
  {
    s << indent << "tags: ";
    s << std::endl;
    Printer< ::std_msgs::UInt16MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.tags);
    s << indent << "image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHARED_MESSAGES_MESSAGE_TAGSIMAGE_H
